#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS, generic_main  # noqa


__version__ = (2016, 9, 20, 21, 6, 35, 1)

__all__ = [
    'bsplParser',
    'bsplSemantics',
    'main'
]

KEYWORDS = set([])


class bsplParser(Parser):
    def __init__(self,
                 whitespace=None,
                 nameguard=None,
                 comments_re=None,
                 eol_comments_re='\u200c\u200c#|(//).*?$',
                 ignorecase=None,
                 left_recursion=True,
                 keywords=KEYWORDS,
                 **kwargs):
        super(bsplParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            keywords=keywords,
            **kwargs
        )

    @graken()
    def _protocol_(self):
        self._constant('protocol')
        self.name_last_node('type')
        self._word_()
        self.name_last_node('name')
        self._token('{')
        self._token('roles')
        self._rolelist_()
        self.name_last_node('roles')
        self._token('parameters')
        self._params_()
        self.name_last_node('parameters')
        self._references_()
        self.name_last_node('references')
        self._token('}')

        self.ast._define(
            ['type', 'name', 'roles', 'parameters', 'references'],
            []
        )

    @graken()
    def _params_(self):

        def sep0():
            self._token(',')

        def block0():
            self._param_()
        self._positive_closure(block0, prefix=sep0)

    @graken()
    def _rolelist_(self):

        def sep0():
            self._token(',')

        def block0():
            self._role_()
        self._positive_closure(block0, prefix=sep0)

    @graken()
    def _role_(self):
        self._word_()
        self.name_last_node('name')

        self.ast._define(
            ['name'],
            []
        )

    @graken()
    def _references_(self):

        def block0():
            with self._choice():
                with self._option():
                    self._message_()
                with self._option():
                    self._ref_()
                self._error('no available options')
        self._closure(block0)

    @graken()
    def _ref_(self):
        self._word_()
        self.name_last_node('name')
        self._token('(')
        self._rolelist_()
        self.name_last_node('roles')
        self._token('|')
        self._params_()
        self.name_last_node('params')
        self._token(')')

        self.ast._define(
            ['name', 'roles', 'params'],
            []
        )

    @graken()
    def _adornment_(self):
        with self._choice():
            with self._option():
                self._token('out')
            with self._option():
                self._token('in')
            with self._option():
                self._token('nil')
            with self._option():
                self._token('any')
            with self._option():
                self._token('opt')
            self._error('expecting one of: any in nil opt out')

    @graken()
    def _message_(self):
        self._constant('message')
        self.name_last_node('type')
        self._word_()
        self.name_last_node('sender')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('->')
                with self._option():
                    self._token('→')
                with self._option():
                    self._token('↦')
                self._error('expecting one of: -> → ↦')
        self._word_()
        self.name_last_node('recipient')
        with self._optional():
            self._token(':')
        self._word_()
        self.name_last_node('name')
        self._token('[')
        self._params_()
        self.name_last_node('params')
        self._token(']')

        self.ast._define(
            ['type', 'sender', 'recipient', 'name', 'params'],
            []
        )

    @graken()
    def _word_(self):
        self._pattern(r'[\w-]+')

    @graken()
    def _param_(self):
        with self._optional():
            self._adornment_()
            self.name_last_node('adornment')
        self._word_()
        self.name_last_node('name')
        with self._optional():
            self._token('key')
            self.name_last_node('key')

        self.ast._define(
            ['adornment', 'name', 'key'],
            []
        )


class bsplSemantics(object):
    def protocol(self, ast):
        return ast

    def params(self, ast):
        return ast

    def rolelist(self, ast):
        return ast

    def role(self, ast):
        return ast

    def references(self, ast):
        return ast

    def ref(self, ast):
        return ast

    def adornment(self, ast):
        return ast

    def message(self, ast):
        return ast

    def word(self, ast):
        return ast

    def param(self, ast):
        return ast


def main(
        filename,
        startrule,
        trace=False,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re='\u200c\u200c#|(//).*?$',
        ignorecase=None,
        left_recursion=True,
        **kwargs):

    with open(filename) as f:
        text = f.read()
    parser = bsplParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard,
        ignorecase=ignorecase,
        **kwargs)
    return ast

if __name__ == '__main__':
    import json
    ast = generic_main(main, bsplParser, name='bspl')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

